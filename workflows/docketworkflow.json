{
  "name": "Navi",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -64,
        624
      ],
      "id": "e72c574a-1845-4d5f-9a79-8e872965806b",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "operation": "getAll",
        "bucketName": "navi-dockets",
        "options": {}
      },
      "type": "n8n-nodes-base.awsS3",
      "typeVersion": 2,
      "position": [
        -992,
        848
      ],
      "id": "60f48bdf-c32f-4268-9566-49593cd477d2",
      "name": "Get many files",
      "credentials": {
        "aws": {
          "id": "QLNCYvjUzugQvoK1",
          "name": "AWS account"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "bucketName": "navi-dockets",
        "fileKey": "={{ $json.Key }}",
        "options": {}
      },
      "type": "n8n-nodes-base.awsS3",
      "typeVersion": 2,
      "position": [
        -624,
        848
      ],
      "id": "7465a12e-60f5-4f06-a7cf-218f9100e4c3",
      "name": "Delete a file",
      "credentials": {
        "aws": {
          "id": "QLNCYvjUzugQvoK1",
          "name": "AWS account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Input: items like { json: { Key: \"CDC-2025-0058-0001.json\", ... } }\n// Output: items like { json: { Key: \"CDC-2025-0058-0001.json\" } }\nreturn $input.all().map(i => ({\n  json: { Key: i.json.Key }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -816,
        848
      ],
      "id": "109323cf-0ac6-4053-a8f4-9963f0e11937",
      "name": "Code2"
    },
    {
      "parameters": {
        "jsCode": "// Extract content from OpenAI response objects\nconst allItems = $input.all();\nconst results = [];\n\nfor (const item of allItems) {\n  // Each item.json is already one of the OpenAI response objects\n  const content = item.json.message?.content || null;\n  \n  results.push({\n    json: { content }\n  });\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2032,
        720
      ],
      "id": "f2d26921-b779-4592-a32d-82a71b59f1e6",
      "name": "Code3"
    },
    {
      "parameters": {
        "url": "https://api.regulations.gov/v4/documents",
        "sendQuery": true,
        "specifyQuery": "json",
        "jsonQuery": "={\n  \"filter[commentEndDate][ge]\": \"{{ new Date().toISOString().split('T')[0] }}\",\n  \"filter[documentType]\": \"Proposed Rule, Notice\",\n  \"page[size]\": 5,\n  \"sort\": \"-postedDate\",\n  \"filter[postedDate][ge]\": \"{{ new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] }}\",\n  \"filter[postedDate][le]\": \"{{ new Date().toISOString().split('T')[0] }}\",\n  \"page[number]\": 7\n}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Api-Key",
              "value": "21Jl3YnRse9ef0CpNF979NvKHZbioX1RAP46Tv8c"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        176,
        624
      ],
      "id": "4d7d95fe-f744-43bc-8fc3-f3b8ff271d8e",
      "name": "fetch docs4"
    },
    {
      "parameters": {
        "jsCode": "// Get the input data - handle both parsed JSON and string responses\nlet response;\nconst inputData = $input.all()[0].json;\n\n// Check if the data is a string that needs parsing\nif (typeof inputData.data === 'string') {\n  try {\n    response = JSON.parse(inputData.data);\n  } catch (e) {\n    console.log('Failed to parse JSON string:', e);\n    return [{ json: { error: 'Failed to parse response data', rawData: inputData } }];\n  }\n} else {\n  response = inputData;\n}\n\n// Validate response structure\nif (!response || !response.data || !Array.isArray(response.data)) {\n  console.log('Invalid response structure:', response);\n  return [{ json: { error: 'Invalid API response structure', response: response } }];\n}\n\nconst documents = response.data;\nconst openDockets = [];\n\nconsole.log(`Processing ${documents.length} documents`);\n\nfor (const doc of documents) {\n  // Safety checks for document structure\n  if (!doc || !doc.attributes) {\n    console.log('Skipping document with no attributes:', doc?.id);\n    continue;\n  }\n  \n  const attrs = doc.attributes;\n  \n  // Only process documents that are explicitly open for comments\n  if (attrs.openForComment !== true || attrs.withinCommentPeriod !== true) {\n    console.log(`Skipping closed document: ${doc.id}`);\n    continue;\n  }\n  \n  console.log(`Processing open document: ${doc.id} - ${attrs.title}`);\n  \n  // Build the result object with safe property access\n  const docketInfo = {\n    docketId: attrs.docketId,\n    documentId: doc.id,\n    title: attrs.title,\n    agencyId: attrs.agencyId,\n    documentType: attrs.documentType,\n    openForComment: attrs.openForComment,\n    withinCommentPeriod: attrs.withinCommentPeriod,\n    commentEndDate: attrs.commentEndDate,\n    commentStartDate: attrs.commentStartDate,\n    postedDate: attrs.postedDate,\n    subtype: attrs.subtype,\n    frDocNum: attrs.frDocNum,\n    allowLateComments: attrs.allowLateComments,\n    objectId: attrs.objectId,\n    lastModifiedDate: attrs.lastModifiedDate,\n    withdrawn: attrs.withdrawn,\n    highlightedContent: attrs.highlightedContent,\n    \n    // API Links\n    apiDocumentLink: doc.links?.self,\n    apiDocketLink: `https://api.regulations.gov/v4/dockets/${attrs.docketId}`,\n    \n    // Public Regulations.gov Web Links (clickable in browser)\n    webDocumentLink: `https://www.regulations.gov/document/${doc.id}`,\n    webDocketLink: `https://www.regulations.gov/docket/${attrs.docketId}`,\n    webCommentLink: `https://www.regulations.gov/comment/${doc.id}`,\n    \n    // Federal Register Link (if available)\n    federalRegisterLink: attrs.frDocNum ? `https://www.federalregister.gov/documents/${new Date(attrs.postedDate).getFullYear()}/${String(new Date(attrs.postedDate).getMonth() + 1).padStart(2, '0')}/${String(new Date(attrs.postedDate).getDate()).padStart(2, '0')}/${attrs.frDocNum}` : null\n  };\n  \n  openDockets.push(docketInfo);\n}\n\n// Remove duplicates by docketId - keep the most recent document per docket\nconst uniqueDockets = [];\nconst docketMap = new Map();\n\nfor (const docket of openDockets) {\n  const existingDocket = docketMap.get(docket.docketId);\n  \n  if (!existingDocket) {\n    docketMap.set(docket.docketId, docket);\n  } else {\n    // Keep the more recently posted document\n    const currentDate = new Date(docket.postedDate);\n    const existingDate = new Date(existingDocket.postedDate);\n    \n    if (currentDate > existingDate) {\n      docketMap.set(docket.docketId, docket);\n    }\n  }\n}\n\n// Convert Map back to array\nfor (const [docketId, docket] of docketMap) {\n  uniqueDockets.push(docket);\n}\n\nconsole.log(`Found ${uniqueDockets.length} unique open dockets`);\n\nreturn uniqueDockets.map(docket => ({ json: docket }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        384,
        624
      ],
      "id": "c0cff12e-42af-4e56-a0cb-f449d10452b2",
      "name": "Code4"
    },
    {
      "parameters": {
        "jsCode": "// Process all input items\nconst results = [];\n\nfor (const item of $input.all()) {\n  const webDocumentLink = item.json.webDocumentLink;\n  const documentId = webDocumentLink.split('/document/')[1];\n  \n  // Try HTML first, but could fall back to PDF\n  const contentUrl = `https://downloads.regulations.gov/${documentId}/content.html`;\n  const pdfUrl = `https://downloads.regulations.gov/${documentId}/content.pdf`;\n  \n  results.push({\n    json: {\n      ...item.json,\n      contentUrl: contentUrl,\n      pdfUrl: pdfUrl,\n      documentId: documentId\n    }\n  });\n}\n\nreturn results;"
      },
      "name": "Extract Document ID1",
      "type": "n8n-nodes-base.code",
      "position": [
        592,
        624
      ],
      "id": "79283be3-dad1-4cbb-9e47-4fe69e4991fe",
      "typeVersion": 2
    },
    {
      "parameters": {
        "url": "={{ $json.pdfUrl }}",
        "sendHeaders": true,
        "options": {
          "timeout": 30000
        }
      },
      "name": "HTTP Request - Get Content File1",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1120,
        720
      ],
      "id": "8fdaf1df-2f53-426b-a9ea-fb9d74187900",
      "typeVersion": 4.2,
      "retryOnFail": true,
      "waitBetweenTries": null,
      "maxTries": null
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        880,
        720
      ],
      "id": "ee607b40-1bb7-4a56-a54e-15bb0deebd95",
      "name": "Loop Over Items2"
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1312,
        720
      ],
      "id": "445d068a-6ba5-419d-bca6-672d808bed04",
      "name": "Extract from File1"
    },
    {
      "parameters": {
        "operation": "upload",
        "bucketName": "navi-dockets",
        "fileName": "={{ $json.documentId }}.json",
        "binaryData": false,
        "fileContent": "={{ JSON.stringify($json) }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.awsS3",
      "typeVersion": 2,
      "position": [
        3184,
        720
      ],
      "id": "1cc97588-582c-40f0-a086-48608fd8f100",
      "name": "Upload a file1",
      "credentials": {
        "aws": {
          "id": "QLNCYvjUzugQvoK1",
          "name": "AWS account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const response = $input.all()[0].json;\n\n// Get the embedding array from the response\nconst embedding = response.data[0].embedding;\n\n// Return just the embedding vector\nreturn {\n  embedding: embedding\n};"
      },
      "id": "c7e36fb9-dfcb-41d5-879a-3fb449429a59",
      "name": "Process Embeddings",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2624,
        480
      ]
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "You are an expert document analyst specializing in regulatory content classification. Your task is to analyze regulatory documents and generate comprehensive labels that identify the types of people, professions, industries, and interest areas that would find this document relevant.\n\nYour labels should be specific, actionable, and cover these categories:\n- Professional roles and job titles\n- Industry sectors and business types\n- Academic fields and research areas\n- Personal interests and advocacy areas\n- Geographic relevance\n- Regulatory impact areas\n\nFormat your response as a structured JSON with clear categorization.",
              "role": "system"
            },
            {
              "content": "=Analyze the following regulatory document text and generate comprehensive labels to help match it with interested individuals based on their profiles.\n\n**Document Text:**\n{{$json.text}}\n\n**Instructions:**\n1. Read the document carefully and identify its main regulatory focus\n2. Consider who would be professionally affected by this regulation\n3. Think about academic researchers who might study this area\n4. Consider advocacy groups and personal interest areas\n5. Identify geographic scope and specific communities affected\n\n**Output Format:**\nReturn only a simple array of labels. Include all relevant terms that someone might have in their profile - job titles, industries, interests, academic fields, geographic areas, technical terms, etc.\n\n**Example Output:**\n[\n  \"Environmental Engineer\",\n  \"Compliance Officer\", \n  \"Water Treatment Plant Manager\",\n  \"Environmental Lawyer\",\n  \"Water Utilities\",\n  \"Chemical Manufacturing\",\n  \"Agriculture\",\n  \"Municipal Services\",\n  \"Environmental Science\",\n  \"Public Policy\", \n  \"Civil Engineering\",\n  \"Environmental Law\",\n  \"Clean Water Advocacy\",\n  \"Environmental Protection\",\n  \"Public Health\",\n  \"Community Safety\",\n  \"Great Lakes Region\",\n  \"Federal Regulation\",\n  \"Manufacturing States\",\n  \"Compliance Requirements\",\n  \"Equipment Upgrades\",\n  \"Monitoring Obligations\",\n  \"Water Quality Association\",\n  \"Environmental Defense Fund\",\n  \"water quality standards\",\n  \"discharge permits\",\n  \"pollution control\",\n  \"environmental monitoring\"\n]\n\nNow analyze the document and provide the labeling in this exact JSON format."
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        1680,
        912
      ],
      "id": "f98e8f85-0b4c-4a71-95c3-b362aacf9cb4",
      "name": "label",
      "credentials": {
        "openAiApi": {
          "id": "F169arrzssThHDY1",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Analyze this Federal Register document and provide a comprehensive summary in 10 sentences or less. Include: 1) What agency issued this notice and what action they're taking, 2) Who or what is affected, 3) Key requirements or change. Documents may contain multiple distinct notices/actions so for each one do each of these steps.\n\nDocument: {{$json.text}}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        1680,
        720
      ],
      "id": "a8b3d18d-a466-4610-8bbe-df98d2d6ae39",
      "name": "summary",
      "credentials": {
        "openAiApi": {
          "id": "F169arrzssThHDY1",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/embeddings",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "text-embedding-3-small"
            },
            {
              "name": "input",
              "value": "={{ $json.text }}"
            }
          ]
        },
        "options": {}
      },
      "id": "2f3ff507-dcf8-4acd-a46a-c3ee11f77e86",
      "name": "embed",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2416,
        480
      ],
      "credentials": {
        "openAiApi": {
          "id": "F169arrzssThHDY1",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Extract content from OpenAI response objects\nconst allItems = $input.all();\nconst results = [];\n\nfor (const item of allItems) {\n  // Each item.json is already one of the OpenAI response objects\n  const content = item.json.message?.content || null;\n  \n  results.push({\n    json: { content }\n  });\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2032,
        912
      ],
      "id": "9fb8aa78-5953-459c-a28f-5183a0005b3e",
      "name": "Code5"
    },
    {
      "parameters": {
        "jsCode": "// Remove all newlines (\\n) and backslashes from the content field\nconst inputData = $input.all()[0].json;\n\n// Get the content field\nconst originalText = inputData.content;\n\n// Handle case where content might be undefined\nif (!originalText) {\n  return {\n    error: \"No content field found\",\n    inputData: inputData\n  };\n}\n\n// Remove all \\n characters, \\r characters, and backslashes\nconst cleanedText = originalText\n  .replace(/\\\\n/g, ' ')    // Remove literal \\n sequences  \n  .replace(/\\n/g, ' ')     // Remove actual newlines\n  .replace(/\\\\r/g, ' ')    // Remove literal \\r sequences\n  .replace(/\\r/g, ' ')     // Remove actual carriage returns\n  .replace(/\\\\/g, '')      // Remove all remaining backslashes\n  .replace(/\\s+/g, ' ')    // Replace multiple spaces with single space\n  .trim();                 // Remove leading/trailing spaces\n\n// Return the cleaned text\nreturn {\n  content: cleanedText,\n  originalLength: originalText.length,\n  cleanedLength: cleanedText.length\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2240,
        912
      ],
      "id": "955d0bfd-b6ba-45a8-a1ab-25c5e183871e",
      "name": "clean"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2000,
        480
      ],
      "id": "fff28bd6-4663-4c77-b973-7ca8c880e6d0",
      "name": "Merge1"
    },
    {
      "parameters": {
        "jsCode": "// Get all input items\nconst inputItems = $input.all();\n\n// Find the items with text and content\nlet textContent = \"\";\nlet contentData = \"\";\n\ninputItems.forEach(item => {\n  if (item.json.text) {\n    textContent = item.json.text;\n  }\n  if (item.json.content) {\n    contentData = item.json.content;\n  }\n});\n\n// Merge content at the beginning of text\nconst mergedText = contentData + textContent;\n\n// Return the merged result\nreturn {\n  text: mergedText\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2208,
        480
      ],
      "id": "a86de135-b628-497c-b9b9-116f94c21655",
      "name": "Code6"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2816,
        704
      ],
      "id": "d9db6e54-3437-40df-ad37-98e8d752bdcc",
      "name": "Merge2"
    },
    {
      "parameters": {
        "jsCode": "// Get all input items\nconst inputItems = $input.all();\n\n// Initialize the result object\nlet result = {};\n\ninputItems.forEach(item => {\n  const data = item.json;\n  \n  // Extract documentId as the main key\n  if (data.docketId !== undefined) {\n    result.docketId = data.docketId;\n  }\n  if (data.documentId !== undefined) {\n    result.documentId = data.documentId;\n  }\n  if (data.title !== undefined) {\n    result.title = data.title;\n  }\n  if (data.agencyId !== undefined) {\n    result.agencyId = data.agencyId;\n  }\n  if (data.documentType !== undefined) {\n    result.documentType = data.documentType;\n  }\n  if (data.openForCo !== undefined) {\n    result.openForCo = data.openForCo;\n  }\n  \n  // Add embedding and content at the same level\n  if (data.embedding !== undefined) {\n    result.embedding = data.embedding;\n  }\n  if (data.content !== undefined) {\n    result.content = data.content;\n  }\n});\n\n// Return the flattened object\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3008,
        720
      ],
      "id": "fdca733b-3fd3-44ca-ba8c-7f76153ccc80",
      "name": "Code7"
    },
    {
      "parameters": {
        "amount": "=1"
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        3392,
        720
      ],
      "id": "ae6010cc-d0f7-4195-bd70-3e8ac4fe340f",
      "name": "Wait1",
      "webhookId": "6f3ed931-ac0c-472f-9471-c0cc16747246"
    },
    {
      "parameters": {
        "url": "https://api.regulations.gov/v4/documents",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "filter[commentEndDate][ge]",
              "value": "={{new Date().toISOString().split('T')[0]}}"
            },
            {
              "name": "filter[documentType]",
              "value": "Proposed Rule, Notice"
            },
            {
              "name": "page[size]",
              "value": "100"
            },
            {
              "name": "sort",
              "value": "-postedDate"
            },
            {
              "name": "filter[postedDate]",
              "value": "={{ new Date().setDate(new Date().getDate() - 7).toISOString() }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Api-Key",
              "value": "21Jl3YnRse9ef0CpNF979NvKHZbioX1RAP46Tv8c"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        128,
        976
      ],
      "id": "460c401e-b20d-4b15-b6f7-0b2fe4002d49",
      "name": "fetch docs5"
    },
    {
      "parameters": {
        "url": "https://api.regulations.gov/v4/documents",
        "sendQuery": true,
        "specifyQuery": "json",
        "jsonQuery": "={\n  \"filter[commentEndDate][ge]\": \"{{ new Date().toISOString().split('T')[0] }}\",\n  \"filter[documentType]\": \"Proposed Rule, Notice\",\n  \"page[size]\": 20,\n  \"sort\": \"-postedDate\",\n  \"filter[postedDate][ge]\": \"{{ new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] }}\",\n  \"filter[postedDate][le]\": \"{{ new Date().toISOString().split('T')[0] }}\",\n  \"page[number]\": 1\n}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Api-Key",
              "value": "21Jl3YnRse9ef0CpNF979NvKHZbioX1RAP46Tv8c"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -288,
        -96
      ],
      "id": "d4172832-96cb-4c06-b4f8-dafdc7f1dca1",
      "name": "fetch docs1"
    },
    {
      "parameters": {
        "jsCode": "// Get the input data - handle both parsed JSON and string responses\nlet response;\nconst inputData = $input.all()[0].json;\n\n// Check if the data is a string that needs parsing\nif (typeof inputData.data === 'string') {\n  try {\n    response = JSON.parse(inputData.data);\n  } catch (e) {\n    console.log('Failed to parse JSON string:', e);\n    return [{ json: { error: 'Failed to parse response data', rawData: inputData } }];\n  }\n} else {\n  response = inputData;\n}\n\n// Validate response structure\nif (!response || !response.data || !Array.isArray(response.data)) {\n  console.log('Invalid response structure:', response);\n  return [{ json: { error: 'Invalid API response structure', response: response } }];\n}\n\nconst documents = response.data;\nconst openDockets = [];\n\nconsole.log(`Processing ${documents.length} documents`);\n\nfor (const doc of documents) {\n  // Safety checks for document structure\n  if (!doc || !doc.attributes) {\n    console.log('Skipping document with no attributes:', doc?.id);\n    continue;\n  }\n  \n  const attrs = doc.attributes;\n  \n  // Only process documents that are explicitly open for comments\n  if (attrs.openForComment !== true || attrs.withinCommentPeriod !== true) {\n    console.log(`Skipping closed document: ${doc.id}`);\n    continue;\n  }\n  \n  console.log(`Processing open document: ${doc.id} - ${attrs.title}`);\n  \n  // Build the result object with safe property access\n  const docketInfo = {\n    docketId: attrs.docketId,\n    documentId: doc.id,\n    title: attrs.title,\n    agencyId: attrs.agencyId,\n    documentType: attrs.documentType,\n    openForComment: attrs.openForComment,\n    withinCommentPeriod: attrs.withinCommentPeriod,\n    commentEndDate: attrs.commentEndDate,\n    commentStartDate: attrs.commentStartDate,\n    postedDate: attrs.postedDate,\n    subtype: attrs.subtype,\n    frDocNum: attrs.frDocNum,\n    allowLateComments: attrs.allowLateComments,\n    objectId: attrs.objectId,\n    lastModifiedDate: attrs.lastModifiedDate,\n    withdrawn: attrs.withdrawn,\n    highlightedContent: attrs.highlightedContent,\n    \n    // API Links\n    apiDocumentLink: doc.links?.self,\n    apiDocketLink: `https://api.regulations.gov/v4/dockets/${attrs.docketId}`,\n    \n    // Public Regulations.gov Web Links (clickable in browser)\n    webDocumentLink: `https://www.regulations.gov/document/${doc.id}`,\n    webDocketLink: `https://www.regulations.gov/docket/${attrs.docketId}`,\n    webCommentLink: `https://www.regulations.gov/comment/${doc.id}`,\n    \n    // Federal Register Link (if available)\n    federalRegisterLink: attrs.frDocNum ? `https://www.federalregister.gov/documents/${new Date(attrs.postedDate).getFullYear()}/${String(new Date(attrs.postedDate).getMonth() + 1).padStart(2, '0')}/${String(new Date(attrs.postedDate).getDate()).padStart(2, '0')}/${attrs.frDocNum}` : null\n  };\n  \n  openDockets.push(docketInfo);\n}\n\n// Remove duplicates by docketId - keep the most recent document per docket\nconst uniqueDockets = [];\nconst docketMap = new Map();\n\nfor (const docket of openDockets) {\n  const existingDocket = docketMap.get(docket.docketId);\n  \n  if (!existingDocket) {\n    docketMap.set(docket.docketId, docket);\n  } else {\n    // Keep the more recently posted document\n    const currentDate = new Date(docket.postedDate);\n    const existingDate = new Date(existingDocket.postedDate);\n    \n    if (currentDate > existingDate) {\n      docketMap.set(docket.docketId, docket);\n    }\n  }\n}\n\n// Convert Map back to array\nfor (const [docketId, docket] of docketMap) {\n  uniqueDockets.push(docket);\n}\n\nconsole.log(`Found ${uniqueDockets.length} unique open dockets`);\n\nreturn uniqueDockets.map(docket => ({ json: docket }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -80,
        -96
      ],
      "id": "ebe56ac4-e7b1-40ac-8ba0-cab1ae9cdf31",
      "name": "Code9"
    },
    {
      "parameters": {
        "jsCode": "// Process all input items\nconst results = [];\n\nfor (const item of $input.all()) {\n  const webDocumentLink = item.json.webDocumentLink;\n  const documentId = webDocumentLink.split('/document/')[1];\n  \n  // Try HTML first, but could fall back to PDF\n  const contentUrl = `https://downloads.regulations.gov/${documentId}/content.html`;\n  const pdfUrl = `https://downloads.regulations.gov/${documentId}/content.pdf`;\n  \n  results.push({\n    json: {\n      ...item.json,\n      contentUrl: contentUrl,\n      pdfUrl: pdfUrl,\n      documentId: documentId\n    }\n  });\n}\n\nreturn results;"
      },
      "name": "Extract Document ID2",
      "type": "n8n-nodes-base.code",
      "position": [
        128,
        -96
      ],
      "id": "df507a9a-8b8a-4934-955c-712bdd4dc0d4",
      "typeVersion": 2
    },
    {
      "parameters": {
        "url": "={{ $json.pdfUrl }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Api-Key",
              "value": "21Jl3YnRse9ef0CpNF979NvKHZbioX1RAP46Tv8c"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "name": "HTTP Request - Get Content File2",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        640,
        -96
      ],
      "id": "5ece6b9c-4e1d-4833-8e2b-33f6b4bbe3e7",
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        400,
        -96
      ],
      "id": "a6f78183-66bd-41c8-9793-0758335bbfb1",
      "name": "Loop Over Items3"
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        720,
        -272
      ],
      "id": "486243fb-18cc-4261-a12e-801f835efa98",
      "name": "Extract from File2"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1600,
        -48
      ],
      "id": "78668a36-43ec-447f-b319-42ef37c4db7e",
      "name": "Merge3"
    },
    {
      "parameters": {
        "operation": "upload",
        "bucketName": "navi-dockets",
        "fileName": "={{ $json.documentId }}.json",
        "binaryData": false,
        "fileContent": "={{ JSON.stringify($json) }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.awsS3",
      "typeVersion": 2,
      "position": [
        1776,
        -48
      ],
      "id": "aa23c739-0689-4c6c-9032-cc5f8a95b4c4",
      "name": "Upload a file2",
      "credentials": {
        "aws": {
          "id": "QLNCYvjUzugQvoK1",
          "name": "AWS account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-3.5-turbo",
          "mode": "list",
          "cachedResultName": "GPT-3.5-TURBO"
        },
        "messages": {
          "values": [
            {
              "content": "=Analyze this Federal Register document and provide a comprehensive summary in 10 sentences or less. Include: 1) What agency issued this notice and what action they're taking, 2) Who or what is affected, 3) Key requirements or change. Documents may contain multiple distinct notices/actions so for each one do each of these steps.\n\nDocument: {{$json.text}}"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        1376,
        -272
      ],
      "id": "7501a907-0086-409d-b2db-02fb0f4cacfc",
      "name": "Message a model1",
      "credentials": {
        "openAiApi": {
          "id": "F169arrzssThHDY1",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1136,
        -272
      ],
      "id": "53288d2c-ca93-45c8-9719-6dcb93535241",
      "name": "Loop Over Items4"
    },
    {
      "parameters": {
        "jsCode": "// Keep only \"text\" and remove newline chars (\\n, \\r\\n) by replacing with a space\nreturn items.map(item => {\n  const text = item.json?.text;\n  const cleaned = typeof text === 'string' ? text.replace(/\\r?\\n/g, ' ') : null;\n  return { json: { text: cleaned } };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        928,
        -272
      ],
      "id": "69d4594f-8eca-47e1-b8bf-d47442c9f71d",
      "name": "Code11"
    },
    {
      "parameters": {
        "jsCode": "// Extract content from OpenAI response objects\nconst allItems = $input.all();\nconst results = [];\n\nfor (const item of allItems) {\n  // Each item.json is already one of the OpenAI response objects\n  const content = item.json.message?.content || null;\n  \n  results.push({\n    json: { content }\n  });\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1408,
        -48
      ],
      "id": "e1c2de47-abb3-4bf2-ab73-ea60a661858c",
      "name": "Code12"
    },
    {
      "parameters": {
        "jsCode": "// Keep only \"text\", remove newline chars, and truncate to 6k words if needed\nreturn items.map(item => {\n  const text = item.json?.text;\n  \n  if (!text || typeof text !== 'string') {\n    return { json: { text: null } };\n  }\n  \n  // Remove newline characters by replacing with a space\n  const cleaned = text.replace(/\\r?\\n/g, ' ');\n  \n  // Split text into words\n  const words = cleaned.split(/\\s+/);\n  \n  // Check if text is longer than 6,000 words\n  if (words.length > 5000) {\n    // Truncate to 6,000 words\n    const truncatedWords = words.slice(0, 5000);\n    const truncatedText = truncatedWords.join(' ');\n    \n    return { json: { text: truncatedText } };\n  } else {\n    // Text is already within limit\n    return { json: { text: cleaned } };\n  }\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1488,
        720
      ],
      "id": "960d7145-9580-4162-960a-7f77442466cf",
      "name": "truncate + clean"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "fetch docs4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get many files": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "Delete a file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete a file": {
      "main": [
        []
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "fetch docs4": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        [
          {
            "node": "Extract Document ID1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Document ID1": {
      "main": [
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request - Get Content File1": {
      "main": [
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items2": {
      "main": [
        [],
        [
          {
            "node": "HTTP Request - Get Content File1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge2",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "truncate + clean",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "summary": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "embed": {
      "main": [
        [
          {
            "node": "Process Embeddings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "label": {
      "main": [
        [
          {
            "node": "Code5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code5": {
      "main": [
        [
          {
            "node": "clean",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "clean": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Code6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code6": {
      "main": [
        [
          {
            "node": "embed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Embeddings": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Code7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code7": {
      "main": [
        [
          {
            "node": "Upload a file1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload a file1": {
      "main": [
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Loop Over Items2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "fetch docs1": {
      "main": [
        [
          {
            "node": "Code9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code9": {
      "main": [
        [
          {
            "node": "Extract Document ID2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Document ID2": {
      "main": [
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request - Get Content File2": {
      "main": [
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items3": {
      "main": [
        [
          {
            "node": "Extract from File2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request - Get Content File2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File2": {
      "main": [
        [
          {
            "node": "Code11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "Upload a file2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model1": {
      "main": [
        [
          {
            "node": "Loop Over Items4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items4": {
      "main": [
        [
          {
            "node": "Code12",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Message a model1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code11": {
      "main": [
        [
          {
            "node": "Loop Over Items4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code12": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "truncate + clean": {
      "main": [
        [
          {
            "node": "summary",
            "type": "main",
            "index": 0
          },
          {
            "node": "label",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "fdcda196-cffb-4978-ad34-db441273d68a",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "57da923809da51439b894e9cbb8487d25e9b17747b55bb53f40119dfffcdc195"
  },
  "id": "iVjsJHCygS6NnV1W",
  "tags": []
}